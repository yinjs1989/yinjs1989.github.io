<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2015/10/31/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java文件操作]]></title>
      <url>http://yoursite.com/2015/10/31/java-io/</url>
      <content type="html"><![CDATA[<h2 id="Java_IO发展过程">Java IO发展过程</h2><ol>
<li>jdk 1.0版本的java io是基于字节流的，所有的输入输出都继承自InputStream和OutputStream。</li>
<li>jdk 1.1版本增加了Reader和Writer，提供兼容Unicode的面向字符的I/O功能。</li>
<li>jdk 1.4版本增加了新I/O系统，nio，实现了基于块的文件流处理，不过jdk 1.4以后已经对老的IO用nio进行了重新实现，所以即使使用老的IO方案，也能享受到nio的性能优化。</li>
</ol>
<h2 id="日常开发中如何使用">日常开发中如何使用</h2><h3 id="文本文件读写">文本文件读写</h3><p>对于基本的文本文件的读写，推荐使用BufferedReader和BufferedWriter，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"input.txt"</span>));</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"output.txt"</span>));</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    bw.write(line + <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure></p>
<h3 id="二进制文件读写">二进制文件读写</h3><p>对于非文本的需要用到字节流操作的地方，可以使用InputStream和OutputStream，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"from.jar"</span>));</span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"to.jar"</span>));</span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>(bis.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">	bos.write(buffer);</span><br><span class="line">&#125;</span><br><span class="line">bos.flush();</span><br><span class="line">bos.close();</span><br><span class="line">bis.close();</span><br></pre></td></tr></table></figure></p>
<h3 id="Scanner">Scanner</h3><p>Scanner可以成为一个文本扫描器，可以从文本中解析出Java的基本数据类型，整形、字符串等，也可以指定分隔符对文本进行拆分和读取。主要用于从console读取用户输入。</p>
<h4 id="PrintWriter">PrintWriter</h4><p>PrintWriter也是继承自Writer，主要用于格式化输出，接口比较丰富，某些情况下如果非得要用PrintWriter，可以用PrintWriter对BufferedWriter进行封装，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"filename.txt"</span>)));</span><br></pre></td></tr></table></figure></p>
<h3 id="DataInputStream、DataOutputStream">DataInputStream、DataOutputStream</h3><p>DataInputStream和DataOutputStream提供了从数据流中读取基本的Java数据类型，以及将Java数据类型写入到数据流的方法，如下使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 1.写</span><br><span class="line"> */</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"C:/person.data"</span>);</span><br><span class="line">FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(outputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给person.data这个文件写入数据</span></span><br><span class="line">dataOutputStream.writeInt(<span class="number">123</span>);</span><br><span class="line">dataOutputStream.writeUTF(<span class="string">"写入中文，ok"</span>);</span><br><span class="line">dataOutputStream.writeFloat(<span class="number">234.4f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">dataOutputStream.flush();</span><br><span class="line">dataOutputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 2.读</span><br><span class="line"> */</span></span><br><span class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读出</span></span><br><span class="line"><span class="keyword">int</span> firstInt = dataInputStream.readInt();</span><br><span class="line">String str = dataInputStream.readUTF();</span><br><span class="line"><span class="keyword">float</span> secFlt = dataInputStream.readFloat();</span><br><span class="line"></span><br><span class="line">System.out.println(firstInt + <span class="string">"---"</span> + str + <span class="string">"-----"</span> + secFlt);</span><br><span class="line">dataInputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 注意事项：读取和写入的顺序必须一样，否则抛出错误，也不能少读取。</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Bean 的生命周期]]></title>
      <url>http://yoursite.com/2015/10/31/spring-bean-lifecycle/</url>
      <content type="html"><![CDATA[<h1 id="Spring中Bean的加载过程">Spring中Bean的加载过程</h1><ol>
<li>容器启动，加载定义bean的xml文件。</li>
<li>如果有bean实现了BeanFactoyPostProcessor接口，在初始化其他所有bean之前，先对其进行加载，并执行postProcessBeanFactory方法。仅执行一次。</li>
<li>对其他所有的Bean进行实例化，并对属性进行依赖注入。</li>
<li>如果Bean实现了BeanNameAware接口，执行BeanNameAware.setBeanName。</li>
<li>如果Bean实现了BeanFactoryAware接口，执行BeanFactoryAware.setBeanFactory。</li>
<li>如果Bean实现了ApplicationContextAware接口，执行ApplicationContextAware.setApplicationContext。</li>
<li>如果存在实现了BeanPostProcessor接口的Bean，执行BeanPostProcessor.postProcessBeforeInitialization。</li>
<li>如果Bean实现了InitializingBean接口，执行InitializingBean.afterPropertiesSet。</li>
<li>如果Bean定义中，设置了init-method属性，执行指定的方法。</li>
<li>如果存在实现了BeanPostProcessor接口的Bean，执行BeanPostProcessor.postProcessAfterInitialization。</li>
<li>终于可以使用bean了。</li>
<li>如果Bean实现了DisposableBean接口，可以主动调用DisposableBean.destroy，销毁Bean。</li>
</ol>
<p><strong>Attention：</strong></p>
<ul>
<li>BeanFactoyPostProcessor是在所有Bean初始化之前加载的，并且postProcessBeanFactory方法全局只会执行一次。</li>
<li>BeanPostProcessor在每个Bean的初始化过程前后都会执行，初始化过程包括afterPropertiesSet方法，或init-method。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jdbc入门]]></title>
      <url>http://yoursite.com/2015/10/31/jdbc/</url>
      <content type="html"><![CDATA[<h2 id="概述">概述</h2><ul>
<li>JDBC：Java DataBase Connectivity</li>
<li>JDBC最早由Oracle提出，用来在Java中操作数据库。现在JDBC已经成为一种标准，不同的DataBase对应不同的JDBC Driver实现。</li>
</ul>
<h2 id="详解">详解</h2><h3 id="主要组件">主要组件</h3><h4 id="java-sql-DriverManager、_java-sql-DataSource">java.sql.DriverManager、 java.sql.DataSource</h4><p>这两个类都可以用来管理和获取数据库连接的，相比于DriverManager，DataSource是更优的获取数据库连接的方式。它所具有的优势包括：数据库连接池技术、分布式事务等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get connection from DriverManager</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost/countries?"</span> + <span class="string">"user=root&amp;amp;password=root"</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get connection from DataSource</span></span><br><span class="line">MysqlDataSource ds = <span class="keyword">new</span> MysqlDataSource();</span><br><span class="line">ds.setURL(DB_URL);</span><br><span class="line">ds.setUser(USER);</span><br><span class="line">ds.setPassword(PASS);</span><br><span class="line">Connection connection = ds.getConnection();</span><br></pre></td></tr></table></figure></p>
<h4 id="java-sql-Connection">java.sql.Connection</h4><p>Connection的功能包括：</p>
<ul>
<li><p>创建语句</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement updateStmt = conn.prepareStatement( sql );</span><br></pre></td></tr></table></figure>
</li>
<li><p>设定提交策略，事务控制等</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit( <span class="keyword">false</span> );</span><br><span class="line">connection.commit();</span><br><span class="line">connection.roolback();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数据库信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.getMetaData()</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行批处理、存储过程等</p>
</li>
</ul>
<h4 id="java-sql-Statement、java-sql-PreparedStatement">java.sql.Statement、java.sql.PreparedStatement</h4><p>定义要执行的SQL语句，主要API：</p>
<ul>
<li>execute：返回多个ResultSet，不断的调用getResultSet获取查询结果。</li>
<li>executeQuery：返回一个ResultSet。</li>
<li>executeUpdate：返回受影响的行数。</li>
</ul>
<p>示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Statement用来执行简单的、单次执行的、不需要指定参数的SQL语句</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">String sql = <span class="string">"SELECT id, first, last, age FROM Employees"</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// PreparedStatment用来执行带参数SQL</span></span><br><span class="line">String sql = <span class="string">"UPDATE Employees SET age = ? WHERE id = ?"</span>;</span><br><span class="line">PreparedStatement statement = connection.prepareStatement(sql);</span><br><span class="line">statement.setInt(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">statement.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> affectRows = statement.executeUpdate();</span><br></pre></td></tr></table></figure></p>
<h4 id="java-sql-ResultSet">java.sql.ResultSet</h4><p>结果集，示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ResultSet resultSet = statement.getResultSet();</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    <span class="keyword">int</span> id = resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">    String name = resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="FAQ">FAQ</h2><h3 id="Dirver的加载">Dirver的加载</h3><p>如何获取数据库连接，网上的教程一般是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">Connection connection = DriverManager.getConnection(...);</span><br></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Driver driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(driver);</span><br><span class="line">Connection connection = DriverManager.getConnection(...);</span><br></pre></td></tr></table></figure></p>
<p>这里其实是因为DriverManager使用了Bridge模式，DriverManager相当于Abstraction，java.sql.Driver相当于Implementor，com.mysql.jdbc.Driver是Concret Implementor。Class.forName(“com.mysql.jdbc.Driver”)或者Driver driver = new com.mysql.jdbc.Driver()的作用就是加载类，类当中包含了静态语句，用来将driver注册到DriverManager，比如mysql的com.mysql.jdbc.Driver类中就包含下面一段static代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是在JDBC4版本之后，不需要主动加载Driver类了，在调用DirverManager的getConnection方法时，会自动查找并加载Driver。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[togglz]]></title>
      <url>http://yoursite.com/2015/10/31/togglz/</url>
      <content type="html"><![CDATA[<h2 id="简介">简介</h2><h3 id="背景">背景</h3><p>开发模式分为：分支开发（Feature Branch）和主干开发（Continuous Integration）。</p>
<h4 id="分支开发">分支开发</h4><ul>
<li>开发者开始开发一个新功能之前，从主干拉取一个分支，用于开发独立的功能，开发完毕后合并回主干。</li>
<li>如果多个开发者分别并行开发多个独立的功能，则存在多个独立的功能分支。</li>
<li>缺点是：最后一个合并回主干的开发者需要merge大量修改，尤其在公共接口有修改时，工作量大。不利于代码重构。</li>
</ul>
<h4 id="主干开发">主干开发</h4><ul>
<li>所有开发者都在主干上开发，提倡每天提交代码，以使其他开发者随时知晓代码修改。</li>
<li>避免了分支开发中的“大merge”。</li>
<li>缺点是：有可能将半成品功能代码带上线。（下面说的功能开关解决了这个问题）</li>
</ul>
<h4 id="主干开关模式">主干开关模式</h4><p>在主干开发模式基础上，给每个功能增加开关，虽然代码带上线了，但是可以动态的启用或禁用功能开关。</p>
<h3 id="Togglz简介">Togglz简介</h3><p>Togglz是<a href="http://martinfowler.com/bliki/FeatureToggle.html" target="_blank" rel="external">Feature Toggles</a> 模式的一种实现，它支持在应用运行时启用或禁用某些特性。简单来说就是一个开关工具，开发者可以在开发某个功能的时候设定一个开关项，这样就可以在动态的启用或禁用某一项功能。</p>
<h2 id="使用方法">使用方法</h2><h3 id="webapp使用Togglz">webapp使用Togglz</h3><ul>
<li>添加maven依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.togglz<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>togglz-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2.0.Final<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Togglz Admin Console --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.togglz<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>togglz-console<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2.0.Final<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.togglz<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>togglz-servlet<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2.0.Final<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>定义Feature</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.togglz.core.Feature;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.annotation.EnabledByDefault;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.annotation.Label;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.context.FeatureContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MyFeatures implements Feature &#123;</span><br><span class="line">    <span class="annotation">@EnabledByDefault</span></span><br><span class="line">    <span class="annotation">@Label</span>(<span class="string">"First Feature"</span>)</span><br><span class="line">    FEATURE_ONE,</span><br><span class="line">    <span class="annotation">@Label</span>(<span class="string">"Second Feature"</span>)</span><br><span class="line">    FEATURE_TWO;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FeatureContext.getFeatureManager().isActive(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义FeatureConfig</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.togglz.core.Feature;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.manager.TogglzConfig;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.repository.StateRepository;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.repository.file.FileBasedStateRepository;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.user.FeatureUser;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.user.SimpleFeatureUser;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.user.UserProvider;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTogglzConfiguration</span> <span class="keyword">implements</span> <span class="title">TogglzConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;? extends Feature&gt; getFeatureClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> MyFeatures.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> StateRepository <span class="title">getStateRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileBasedStateRepository(<span class="keyword">new</span> File(<span class="string">"features.properties"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserProvider <span class="title">getUserProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserProvider() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FeatureUser <span class="title">getCurrentUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SimpleFeatureUser(<span class="string">"admin"</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加文件features.properties</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">FEATURE_ONE=<span class="value"><span class="keyword">false</span></span></span></span><br><span class="line"><span class="setting">FEATURE_TWO=<span class="value"><span class="keyword">true</span></span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>更新web.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 必须指定的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>org.togglz.core.manager.TogglzConfig<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>com.yinjs.togglz.MyTogglzConfiguration<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- Servlet 3.0以下（Tomcat 7.0以下）需要填写如下配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>TogglzFilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.togglz.servlet.TogglzFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>TogglzFilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>TogglzConsoleServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.togglz.console.TogglzConsoleServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>TogglzConsoleServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/togglz/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>之后启动webapp访问 <a href="http://localhost:8080/webapp-demo/togglz" target="_blank" rel="external">http://localhost:8080/webapp-demo/togglz</a> 就可以了。</li>
</ul>
<h3 id="独立Java_Application使用Togglz">独立Java Application使用Togglz</h3><ul>
<li>添加maven依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.togglz<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>togglz-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2.0.Final<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>定义Feature和FeatureConfig（参考上面）</li>
<li>在初始化代码中设置FeatureManager，并使用Feature。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StaticFeatureManagerProvider.setFeatureManager(<span class="keyword">new</span> FeatureManagerBuilder().togglzConfig(<span class="keyword">new</span> MyTogglzConfiguration()).build());</span><br><span class="line"><span class="keyword">if</span> (MyFeatures.FEATURE_ONE.isActive()) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> <span class="label">XXX</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者也可以通过ServiceLoader加载FeatureManager</p>
<ul>
<li>定义FeatureManager</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.togglz.core.manager.FeatureManager;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.manager.FeatureManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.repository.file.FileBasedStateRepository;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.spi.FeatureManagerProvider;</span><br><span class="line"><span class="keyword">import</span> org.togglz.core.user.NoOpUserProvider;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFeatureManagerProvider</span> <span class="keyword">implements</span> <span class="title">FeatureManagerProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FeatureManager featureManager;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FeatureManager <span class="title">getFeatureManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (featureManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            featureManager = <span class="keyword">new</span> FeatureManagerBuilder()</span><br><span class="line">                    .featureEnum(MyFeatures.class)</span><br><span class="line">                    .stateRepository(<span class="keyword">new</span> FileBasedStateRepository(<span class="keyword">new</span> File(<span class="string">"features.properties"</span>)))</span><br><span class="line">                    .userProvider(<span class="keyword">new</span> NoOpUserProvider())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> featureManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加ServiceLoader配置文件<br>新建文件META-INF/services/org.togglz.core.spi.FeatureManagerProvider。文件内容：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com<span class="class">.yinjs</span><span class="class">.tools</span><span class="class">.togglz</span><span class="class">.SingletonFeatureManagerProvider</span> #上面定义的FeatureManager的全限定名</span><br></pre></td></tr></table></figure>
<p>更多关于ServiceLoader的内容请访问 <a href="http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html" target="_blank" rel="external">http://docs.oracle.com/javase/7/docs/api/java/util/ServiceLoader.html</a> </p>
<ul>
<li>在代码中使用Feature</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (MyFeatures.FEATURE_ONE.isActive()) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> <span class="label">XXX</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者不用ServiceLoader的方法，直接用</p>
<h2 id="开关状态">开关状态</h2><p>一个开关有两类状态：</p>
<ul>
<li>启用/禁用（Enabled/Disabled）：通过features.properties里面的true或false控制。</li>
<li>激活/未激活（Active/Inactive）：通过激活策略（Activation Strategies）控制。（可以看作小流量控制）</li>
</ul>
<p>总之：</p>
<ul>
<li>仅当开关处于Enabled状态，并且没有制定激活策略或者用户符合激活策略的时候，开关 is active.</li>
<li>当开关处于Disabled状态，或者用户不符合激活策略的时候，开关 is inactive.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hadoop-monitor]]></title>
      <url>http://yoursite.com/2014/01/03/hadoop-monitor/</url>
      <content type="html"><![CDATA[<p>接触Hadoop已经一年半了，期间积累了一些Hadoop运维经验，一直想自己开发一套Hadoop监控系统，正好最近实验室有个相关的项目，就借机研究了一下，在这里总结一下Hadoop监控办法。一直认为Hadoop本身自带的HDFS和JobTracker监控页面是最好用的监控页面，简单明了。但是现在想要自己开发一套监控系统，那该怎样去获取Hadoop集群的当前状况呢？</p>
<ol>
<li><p>网页抓取<br>首先，想到的办法是抓取网页，通过抓取50030和50070页面获得监控的数据。不得不说，这个办法实在是太土了，不到万不得已真的不好意思用。</p>
</li>
<li><p>Hadoop JMX 接口<br>经过各种查阅，看到了一位大神写的文档（链接：<a href="http://slaytanic.blog.51cto.com/2057708/1179108" target="_blank" rel="external">http://slaytanic.blog.51cto.com/2057708/1179108</a> ），再次再膜拜一下这位大神吧。将 <a href="http://namenode:50070/dfshealth.jsp" target="_blank" rel="external">http://namenode:50070/dfshealth.jsp</a> 替换为 <a href="http://namenode:50070/jmx" target="_blank" rel="external">http://namenode:50070/jmx</a> 就可以看到Hadoop自带的JMX接口所返回的JSON格式的数据，信息非常全面。同时，可以在链接的后面，添加参数来获取指定名称的监控信息，例如访问 <a href="http://namenode:50070/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo" target="_blank" rel="external">http://namenode:50070/jmx?qry=Hadoop:service=NameNode,name=NameNodeInfo</a> 就可以只获取NameNodeInfo的信息，通过更改qry=后面的参数，可以指定想要获取的内容，qry参数的值即为json信息中name所对应的内容。<br>通过同样的方法，可以获得：<br>JobTracker的信息：<a href="http://namenode:50030/jmx" target="_blank" rel="external">http://namenode:50030/jmx</a><br>DataNode的信息：<a href="http://datanode:50075/jmx" target="_blank" rel="external">http://datanode:50075/jmx</a><br>TaskTracker信息：<a href="http://datanode:50060/jmx" target="_blank" rel="external">http://datanode:50060/jmx</a><br>上面这些链接基本上可以提供所有想要监控的信息了，但是，找了一圈儿也没找到我想要的Job列表，包括正在运行的作业、成功的作业以及失败的作业信息。</p>
</li>
<li><p>Hadoop API<br>这时想到了早期版本的Hadoop API提交作业的时候都会用的JobClient这个类，抱着试试看的态度，去Hadoop API里面翻了半天，还真有收获。<br>直接上干货了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">InetSocketAddress inetSocket = <span class="keyword">new</span> InetSocketAddress(MonitorUtil.getHostnameOfNamenode(), <span class="number">9001</span>);</span><br><span class="line">JobClient jobClient = <span class="keyword">new</span> JobClient(inetSocket, conf);</span><br><span class="line">JobStatus[] jobsStatus = jobClient.getAllJobs();</span><br><span class="line"><span class="comment">//这样就得到了一个JobStatus数组，随便取出一个元素取名叫jobStatus</span></span><br><span class="line">jobStatus = jobsStatus[<span class="number">0</span>];</span><br><span class="line">JobID jobID = jobStatus.getJobID(); <span class="comment">//通过JobStatus获取JobID</span></span><br><span class="line">RunningJob runningJob = jobClient.getJob(jobID);  <span class="comment">//通过JobID得到RunningJob对象</span></span><br><span class="line">runningJob.getJobState();<span class="comment">//可以获取作业状态，状态有五种，为JobStatus.Failed 、JobStatus.KILLED、JobStatus.PREP、JobStatus.RUNNING、JobStatus.SUCCEEDED</span></span><br><span class="line">jobStatus.getUsername();<span class="comment">//可以获取运行作业的用户名。</span></span><br><span class="line">runningJob.getJobName();<span class="comment">//可以获取作业名。</span></span><br><span class="line">jobStatus.getStartTime();<span class="comment">//可以获取作业的开始时间，为UTC毫秒数。</span></span><br><span class="line">runningJob.mapProgress();<span class="comment">//可以获取Map阶段完成的比例，0~1，</span></span><br><span class="line">runningJob.reduceProgress();<span class="comment">//可以获取Reduce阶段完成的比例。</span></span><br><span class="line">runningJob.getFailureInfo();<span class="comment">//可以获取失败信息。</span></span><br><span class="line">runningJob.getCounters();<span class="comment">//可以获取作业相关的计数器，计数器的内容和作业监控页面上看到的计数器的值一样。</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>计数器这块稍微有点儿麻烦，举个例子吧。想要获得HDFS_BYTES_READ的值，方法为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runningJob.getCounters().getGroup(<span class="string">"FileSystemCounters"</span>).getCounter(<span class="string">"HDFS_BYTES_READ"</span>)；</span><br></pre></td></tr></table></figure></p>
<p>这里的FileSystemCounters为Group的名称，以该名称作为getGrout的参数可以取得相应的Group。Group的名称和50030页面上看到的组的名称并不相同，对应关系为：</p>
<table>
<thead>
<tr>
<th>API 组名</th>
<th>50030组名</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.apache.hadoop.mapred.JobInProgress$Counter</td>
<td>Job Counters</td>
</tr>
<tr>
<td>org.apache.hadoop.mapreduce.lib.output.FileOutputFormat$Counter</td>
<td>File Output Format Counters</td>
</tr>
<tr>
<td>FileSystemCounters</td>
<td>FileSystemCounters</td>
</tr>
<tr>
<td>org.apache.hadoop.mapreduce.lib.input.FileInputFormat$Counter</td>
<td>File Input Format Counters</td>
</tr>
<tr>
<td>org.apache.hadoop.mapred.Task$Counter</td>
<td>Map-Reduce Framework</td>
</tr>
</tbody>
</table>
<p>左边为getGroup函数参数名，后面为想要获取的组名称。得到Group之后就可以通过计数器的名称来得到相应计数器的值了。</p>
<p>这里可以提供的信息已经很全面了，不过缺少了一个作业运行时间，或者作业的结束时间。对于正在运行的作业倒是可以通过当前时间减去开始时间来获得运行时间，但是结束时间目前还没找到解决办法。如果有知道的朋友，可以告诉我，感激不尽。</p>
<p>网上看到一篇博客（<a href="http://blog.sina.com.cn/s/blog_4a1f59bf0100nv03.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4a1f59bf0100nv03.html</a> ），提到Cluster类提供了更丰富的API接口，这个应该是要求Hadoop2.0以上的版本，由于不能升级实验室的Hadoop所以就没有测试。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HDFS冗余数据块的自动删除]]></title>
      <url>http://yoursite.com/2013/10/13/hdfs-block-auto-delete/</url>
      <content type="html"><![CDATA[<p>在日常维护hadoop集群的过程中发现这样一种情况：<br>某个节点由于网络故障或者DataNode进程死亡，被NameNode判定为死亡，HDFS马上自动开始数据块的容错拷贝；当该节点重新添加到集群中时，由于该节点上的数据其实并没有损坏，所以造成了HDFS上某些block的备份数超过了设定的备份数。通过观察发现，这些多余的数据块经过很长的一段时间才会被完全删除掉，那么这个时间取决于什么呢？<br>该时间的长短跟数据块报告的间隔时间有关。Datanode会定期将当前该结点上所有的BLOCK信息报告给Namenode，参数dfs.blockreport.intervalMsec就是控制这个报告间隔的参数。<br>hdfs-site.xml文件中有一个参数：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;dfs.blockreport.intervalMsec&lt;/name&gt;</span><br><span class="line">	&lt;value&gt;3600000&lt;/value&gt;</span><br><span class="line">	&lt;description&gt;Determines block reporting interval in milliseconds.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">	其中3600000为默认设置，3600000毫秒，即1个小时，也就是说，块报告的时间间隔为1个小时，所以经过了很长时间这些多余的块才被删除掉。通过实际测试发现，当把该参数调整的稍小一点的时候（60秒），多余的数据块确实很快就被删除了。</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hadoop datanode节点超时时间设置]]></title>
      <url>http://yoursite.com/2013/10/13/hdfs-datanode-timeout/</url>
      <content type="html"><![CDATA[<p>datanode进程死亡或者网络故障造成datanode无法与namenode通信，namenode不会立即把该节点判定为死亡，要经过一段时间，这段时间暂称作超时时长。HDFS默认的超时时长为10分钟+30秒。如果定义超时时间为timeout，则超时时长的计算公式为：<br>timeout = 2 * heartbeat.recheck.interval + 10 * dfs.heartbeat.interval。<br>而默认的heartbeat.recheck.interval 大小为5分钟，dfs.heartbeat.interval默认为3秒。需要注意的是hdfs-site.xml 配置文件中的heartbeat.recheck.interval的单位为毫秒，dfs.heartbeat.interval的单位为秒。所以，举个例子，如果heartbeat.recheck.interval设置为5000（毫秒），dfs.heartbeat.interval设置为3（秒，默认），则总的超时时间为40秒。<br>hdfs-site.xml中的参数设置格式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>heartbeat.recheck.interval<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>5000<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.heartbeat.interval<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">value</span>&gt;</span>3<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
  
  
</search>
